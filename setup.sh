#! /bin/bash

#color codes
RED='\033[1;31m'
YELLOW='\033[1;33m'
BLUE="\\033[38;5;27m"
SEA="\\033[38;5;49m"
GREEN='\033[1;32m'
CYAN='\033[1;36m'
NC='\033[0m'

#os
function getOS() {
  grep -E '^(VERSION|NAME)=' /etc/os-release | cut -d '"' -f2
}


if ! figlet -v > /dev/null 2>&1; then
	sudo apt-get update -y > /dev/null 2>&1
	sudo apt-get install -y figlet > /dev/null 2>&1
fi


if ! wget --version > /dev/null 2>&1 ; then
	sudo apt install -y wget > /dev/null 2>&1 && sleep 2
fi

if ! whiptail -v > /dev/null 2>&1; then
	sudo apt-get install -y whiptail > /dev/null 2>&1
fi

function installDocker {
    # Update the package database
    echo -e "${CYAN}Updating package database...${NC}"
    sudo apt-get update

    # Install required packages
    echo "Installing required packages..."
    sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

    # Add Docker's official GPG key
    echo "Adding Docker's official GPG key..."
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    # Verify the key with the fingerprint
    echo "Verifying the fingerprint..."
    sudo apt-key fingerprint 0EBFCD88

    # Add the Docker repository
    echo "Adding the Docker repository..."
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

    # Update the package database with Docker packages from the newly added repo
    echo "Updating package database..."
    sudo apt-get update

    # Install Docker CE
    echo "Installing Docker CE..."
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io

    # Add current user to the Docker group
    echo "Adding current user to the Docker group..."
    sudo usermod -aG docker $USER

    # Install Docker Compose
    echo "Installing Docker Compose..."
    sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose

    echo -e "${CYAN}Installation complete. You may need to log out and back in for group changes to take effect.${NC}"
}

function create_bitcoin_conf() {
    # Ask for RPC username
    RPC_USER=$(whiptail --inputbox "Enter your RPC username" 8 39 --title "RPC Username" 3>&1 1>&2 2>&3)

    # Exit if cancelled
    if [ $? -ne 0 ]; then
        echo "User cancelled the operation."
        return 1
    fi

    # Ask for RPC password
    RPC_PASSWORD=$(whiptail --passwordbox "Enter your RPC password" 8 39 --title "RPC Password" 3>&1 1>&2 2>&3)

    # Exit if cancelled
    if [ $? -ne 0 ]; then
        echo "User cancelled the operation."
        return 1
    fi

    # Create the bitcoin.conf file
    cat > bitcoin.conf <<EOF
# Generated by https://jlopp.github.io/bitcoin-core-config-generator/
# [core]
# Prune to 5GB
prune=5000

# [network]

# [rpc]
# Accept command line and JSON-RPC commands.
server=1
# Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times. (default: 127.0.0.1 and ::1 i.e., localhost)
rpcbind=0.0.0.0

# Replace user and password with a securely generated and stored password
rpcuser=$RPC_USER
rpcpassword=$RPC_PASSWORD
whitelist=172.16.0.0/12

# [wallet]
# Do not load the wallet and disable wallet RPC calls.
disablewallet=1

# [zeromq]
# Enable publishing of raw block hex to <address>.
# Necessary for your pool to properly receive new block updates.
zmqpubrawblock=0.0.0.0:3000
EOF

    echo "bitcoin.conf has been created successfully."
}

function start_public_pool {
    # Check if docker-compose.yaml or docker-compose.yml exists
    if [ ! -f "docker-compose.yaml" ] && [ ! -f "docker-compose.yml" ]; then
        echo -e "${CYAN}docker-compose.yaml not found${NC}"
        return 1
    fi

    # Check if the containers are running
    if docker-compose ps | grep -q 'Up'; then
        echo "${CYAN}Stopping containers...${NC}"
        docker-compose down
    else
        echo -e "${CYAN}Starting containers...${NC}"
        docker-compose up -d
    fi
}

while true; do
    clear
    sleep 1

    echo -e "${BLUE}"
    figlet -f slant "Pool-Installer"
    echo -e "${YELLOW}================================================================${NC}"
    echo -e "${GREEN}OS: $(getOS) ${NC}"
    echo -e "${GREEN}Created by: WantClue${NC}"
    echo -e "${GREEN}Special thanks to SethforPrivacy${NC}"
    echo -e "${YELLOW}================================================================${NC}"
    echo -e "${CYAN}1  - Install Docker${NC}"
    echo -e "${CYAN}2  - Setup Bitcoin.conf${NC}"
    echo -e "${CYAN}3  - Start/Stop Public-Pool${NC}"
    echo -e "${CYAN}4  - Abort${NC}"
    echo -e "${YELLOW}================================================================${NC}"


    read -rp "Pick an option and hit ENTER: "
    case "$REPLY" in
     1)  
    		clear
    		sleep 1
    		installDocker
     ;;
     2) 
     		clear
    		sleep 1
    		create_bitcoin_conf
     ;;
    3) 
    		clear
    		sleep 1
    		start_public_pool
     ;;
     4) 
    		clear
    		sleep 1
    		exit
     ;;
    esac
done